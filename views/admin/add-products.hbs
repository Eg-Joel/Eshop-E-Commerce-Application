
<section class="bg">
    <div class="container adwaith ">
        <div class="row form-container mt-5  ">
            <div class="col-md-6 col-lg-12 justify-content-center">
                <h1 class="text-center">Add Products</h1>
                <form action="/admin/add-product" method="post" id="submit-form" enctype="multipart/form-data">


                    <label for="name">Product Name</label><br>
                    <input type="text" name="name" class="form-control" required="required"><br>

                     <label for="name">Category</label><br>
                     <label for="Category">Choose a Category:</label>
                     <select id="Category" name="category"class="form-control">
                     {{#each categories}}
                     <option >{{this.category}}</option>
                     {{/each}}
                     </select><br>
                    {{!-- <input type="text" name="category" class="form-control" required="required" ><br> --}}

                      {{!-- <label for="name">Sub Category</label><br>
                    <input type="text" name="subcategory" class="form-control" required="required"><br> --}}

                    <label for="name">Product Details</label><br>
                    
                    <textarea rows="4" cols="50" name="productdetails"  class="form-control"- required="required"></textarea>
                    {{!-- <input type="textarea" name="productdetails" class="form-control"  ><br> --}}

                     <label for="name">Price</label><br>
                    <input type="number" min="1" step="any" name="price" class="form-control" required="required"><br>

                      {{!-- <label for="name">Stock</label><br>
                    <input type="number" min="1" step="any" name="stock" class="form-control" required="required"><br> --}}

                    

                     <label for="name">Image</label><br>

                       <div id="crop">
                        <img id="imgView1"  src="" alt="" style="height: 100px;width:120px;" class="clr">
                        <div class="vald-info" id="info"></div>
                        <h5 class="error_form text-danger" id="image1_error_message"></h5>
                           <div style="display: flex">
                           <div id="image-box1" class="image-container clr" style="height: 300px; width: 20%"></div>
                              <button type="button"  class="btn btneds"  id="crop-btn1" style=" margin-top: 10px; display: none; width: 50%; margin: 20rem 0rem 0rem 0rem;" >crop</button>
                           </div>
                       </div>
                    <input type="file" name="images" class="form-control" id="id_image1"  onchange="changeImg(event)"   ><br>

                    <label for="name">Image 2</label><br>

                     <div id="crop">
                        <img id="imgView2"  src="" alt="" style="height: 100px;width:120px;" class="clr">
                        <div class="vald-info" id="info"></div>
                           <h5 class="error_form text-danger" id="image2_error_message"></h5>
                           <div style="display: flex">
                            <div id="image-box2" class="image-container clr" style="height: 300px; width: 20%"></div>
                              <button type="button"  class="btn btneds"  id="crop-btn2" style=" margin-top: 10px; display: none; width: 50%; margin: 20rem 0rem 0rem 0rem;" >crop</button>
                           </div>
                       </div>

                    <input type="file" name="image2" class="form-control" onchange="changeImg2(event)" id="id_image2" ><br>

                     <label for="name">Image 3</label><br>

                     <div id="crop">
                        <img id="imgView3"  src="" alt="" style="height: 100px;width:120px;" class="clr">
                        <div class="vald-info" id="info"></div>
                        <h5 class="error_form text-danger" id="image3_error_message"></h5>
                        <div style="display: flex">
                        <div id="image-box3" class="image-container clr" style="height: 300px; width: 20%"></div>
                        <button type="button"  class="btn btneds"  id="crop-btn3" style=" margin-top: 10px; display: none; width: 50%; margin: 20rem 0rem 0rem 0rem;" >crop</button>
                        </div>
                     </div>

                    <input type="file" name="image3" class="form-control" onchange="changeImg3(event)" id="id_image3"><br>

                    <button type="submit" class="btn btn-primary">submit</button>
                </form>
            </div>
        </div>
    </div>
</section>



 <script>
    
        function changeImg(event){
       
            document.getElementById('imgView1').src = URL.createObjectURL(event.target.files[0])
        }
         const imagebox1 = document.getElementById("image-box1");
  const crop_btn1 = document.getElementById("crop-btn1");
  const input1 = document.getElementById("id_image1");
 
  // When user uploads the image this event will get triggered
  input1.addEventListener("change", () => {
    // Getting image file object from the input variable
    const img_data1 = input1.files[0];
    // createObjectURL() static method creates a DOMString containing a URL representing the object given in the parameter.
    // The new object URL represents the specified File object or Blob object.
    const url1 = URL.createObjectURL(img_data1);
    // Creating a image tag inside imagebox which will hold the cropping view image(uploaded file) to it using the url created before.
    imagebox1.innerHTML = `<img src="${url1}" id="image1" style="width:100%;">`;
    // Storing that cropping view image in a variable
    const image1 = document.getElementById("image1");
    // Displaying the image box
    document.getElementById("image-box1").style.display = "block";
    // Displaying the Crop buttton
    document.getElementById("crop-btn1").style.display = "block";
    // Hiding the Post button
    document.getElementById("imgView1").style.display = "block";
    const cropper1 = new Cropper(image1, {
      autoCropArea: 1,
      viewMode: 1,
      scalable: false,
      zoomable: false,
      movable: false,
      minCropBoxWidth: 50,
      minCropBoxHeight: 50,
    });
    // When crop button is clicked this event will get triggered
    crop_btn1.addEventListener("click", () => {
      // This method coverts the selected cropped image on the cropper canvas into a blob object
      cropper1.getCroppedCanvas().toBlob((blob) => {
        // Gets the original image data
        let fileInputElement1 = document.getElementById("id_image1");
        // Make a new cropped image file using that blob object, image_data.name will make the new file name same as original image
        let file1 = new File([blob], img_data1.name, {
          type: "image/*",
          lastModified: new Date().getTime(),
        });
        // Create a new container
        let container1 = new DataTransfer();
        // Add the cropped image file to the container
        container1.items.add(file1);
        // Replace the original image file with the new cropped image file
        fileInputElement1.files = container1.files;
        document.getElementById("imgView1").src = URL.createObjectURL(
          fileInputElement1.files[0]
        );
        // Hide the cropper box
        document.getElementById("image-box1").style.display = "none";
        // Hide the crop button
        document.getElementById("crop-btn1").style.display = "none";
          
      });
    });
  });
///////////////////////////////////////////////
        function changeImg2(event){
            
            document.getElementById('imgView2').src = URL.createObjectURL(event.target.files[0])
        }
const imagebox2 = document.getElementById("image-box2");
  const crop_btn2 = document.getElementById("crop-btn2");
  const input2 = document.getElementById("id_image2");
  
  // When user uploads the image this event will get triggered
  input2.addEventListener("change", () => {
    // Getting image file object from the input variable
    const img_data2 = input2.files[0];
    // createObjectURL() static method creates a DOMString containing a URL representing the object given in the parameter.
    // The new object URL represents the specified File object or Blob object.
    const url2 = URL.createObjectURL(img_data2);
    // Creating a image tag inside imagebox which will hold the cropping view image(uploaded file) to it using the url created before.
    imagebox2.innerHTML = `<img src="${url2}" id="image2" style="width:100%;">`;
    // Storing that cropping view image in a variable
    const image2 = document.getElementById("image2");
    // Displaying the image box
    document.getElementById("image-box2").style.display = "block";
    // Displaying the Crop buttton
    document.getElementById("crop-btn2").style.display = "block";
    // Hiding the Post button
    document.getElementById("imgView2").style.display = "block";
    const cropper2 = new Cropper(image2, {
      autoCropArea: 1,
      viewMode: 1,
      scalable: false,
      zoomable: false,
      movable: false,
      minCropBoxWidth: 50,
      minCropBoxHeight: 50,
    });
    // When crop button is clicked this event will get triggered
    crop_btn2.addEventListener("click", () => {
      // This method coverts the selected cropped image on the cropper canvas into a blob object
      cropper2.getCroppedCanvas().toBlob((blob) => {
        // Gets the original image data
        let fileInputElement2 = document.getElementById("id_image2");
        // Make a new cropped image file using that blob object, image_data.name will make the new file name same as original image
        let file2 = new File([blob], img_data2.name, {
          type: "image/*",
          lastModified: new Date().getTime(),
        });
        // Create a new container
        let container2 = new DataTransfer();
        // Add the cropped image file to the container
        container2.items.add(file2);
        // Replace the original image file with the new cropped image file
        fileInputElement2.files = container2.files;
        document.getElementById("imgView2").src = URL.createObjectURL(
          fileInputElement2.files[0]
        );
        // Hide the cropper box
        document.getElementById("image-box2").style.display = "none";
        // Hide the crop button
        document.getElementById("crop-btn2").style.display = "none";
          
      });
    });
  });
/////////////////////////////////////
   function changeImg3(event){
            
            document.getElementById('imgView3').src = URL.createObjectURL(event.target.files[0])
        }
const imagebox3 = document.getElementById("image-box3");
  const crop_btn3 = document.getElementById("crop-btn3");
  const input3 = document.getElementById("id_image3");
  // When user uploads the image this event will get triggered
  input3.addEventListener("change", () => {
    // Getting image file object from the input variable
    const img_data3 = input3.files[0];
    // createObjectURL() static method creates a DOMString containing a URL representing the object given in the parameter.
    // The new object URL represents the specified File object or Blob object.
    const url3 = URL.createObjectURL(img_data3);
    // Creating a image tag inside imagebox which will hold the cropping view image(uploaded file) to it using the url created before.
    imagebox3.innerHTML = `<img src="${url3}" id="image3" style="width:100%;">`;
    // Storing that cropping view image in a variable
    const image3 = document.getElementById("image3");
    // Displaying the image box
    document.getElementById("image-box3").style.display = "block";
    // Displaying the Crop buttton
    document.getElementById("crop-btn3").style.display = "block";
    // Hiding the Post button
    document.getElementById("imgView3").style.display = "block";
    const cropper3 = new Cropper(image3, {
      autoCropArea: 1,
      viewMode: 1,
      scalable: false,
      zoomable: false,
      movable: false,
      minCropBoxWidth: 50,
      minCropBoxHeight: 50,
    });
    // When crop button is clicked this event will get triggered
    crop_btn3.addEventListener("click", () => {
      // This method coverts the selected cropped image on the cropper canvas into a blob object
      cropper3.getCroppedCanvas().toBlob((blob) => {
        // Gets the original image data
        let fileInputElement3 = document.getElementById("id_image3");
        // Make a new cropped image file using that blob object, image_data.name will make the new file name same as original image
        let file3 = new File([blob], img_data3.name, {
          type: "image/*",
          lastModified: new Date().getTime(),
        });
        // Create a new container
        let container3 = new DataTransfer();
        // Add the cropped image file to the container
        container3.items.add(file3);
        // Replace the original image file with the new cropped image file
        fileInputElement3.files = container3.files;
        document.getElementById("imgView3").src = URL.createObjectURL(
          fileInputElement3.files[0]
        );
        // Hide the cropper box
        document.getElementById("image-box3").style.display = "none";
        // Hide the crop button
        document.getElementById("crop-btn3").style.display = "none";
          
      });
    });
  });

  </script>